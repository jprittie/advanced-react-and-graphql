# import * from './generated/prisma.graphql'

# NB - signout returns a custom type that is not tied to Prisma backend
# this is useful if you just want to return a message to the user

type SuccessMessage {
    message: String
}

type Mutation {
    createItem(title: String, description: String, price: Int, image: String, largeImage: String): Item!
    updateItem(id: ID!, title: String, description: String, price: Int): Item!
    deleteItem(id: ID!): Item
    signup(email: String!, password: String!, name: String!): User!
    signin(email: String!, password: String!): User!
    signout: SuccessMessage
    requestReset(email: String!): SuccessMessage
    resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
}

# NB - no need to pass args to User because it's just going to take in jwt cookie and parse it for us
# it will already know user id because it's been passed along with the request
# also, User isn't required bc there may be no logged-in user
type Query {
    items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, first: Int): [Item]!
    item(where: ItemWhereUniqueInput!): Item
    itemsConnection(where: ItemWhereInput): ItemConnection!
    me: User
    # array is required to be returned, but array might be empty
    # so we're not going to make User required
    # otherwise you could run into issues when there are no users in database, or your specific filter returns no one
    users: [User]!
}


# prior to this, we've just been using the regular User type imported from prisma.graphql
# but there are fields that should never be available on the front end
# i.e. password, resetToken, resetTokenExpiry
# this is why we're redefining User in yoga
type User {
    id: ID!
    name: String!
    email: String!
    permissions: [Permission!]!
}

